rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // === Helper Functions ===
    
    // בדיקה אם המשתמש מחובר
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // בדיקה אם המשתמש הוא הבעלים של הנתונים
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // קבלת household_id של המשתמש הנוכחי
    // ✅ מתוקן: בדיקת exists() לפני get()
    function getUserHouseholdId() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid))
        ? get(/databases/$(database)/documents/users/$(request.auth.uid)).data.household_id
        : null;
    }
    
    // בדיקה אם המשתמש שייך ל-household
    // ✅ מתוקן: בדיקת exists() + null check
    function isHouseholdMember(householdId) {
      let userHouseholdId = getUserHouseholdId();
      return isAuthenticated() && 
             userHouseholdId != null &&
             userHouseholdId == householdId;
    }
    
    // בדיקה אם שני משתמשים באותו household
    function sameHousehold(otherUserId) {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             exists(/databases/$(database)/documents/users/$(otherUserId)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.household_id ==
             get(/databases/$(database)/documents/users/$(otherUserId)).data.household_id;
    }
    
    // בדיקה שהמסמך החדש מכיל household_id תקין
    function hasValidHouseholdId() {
      return request.resource.data.keys().hasAll(['household_id']) &&
             request.resource.data.household_id == getUserHouseholdId();
    }
    
    // === Users Collection ===
    match /users/{userId} {
      // ✅ מתוקן: משתמש יכול לקרוא את עצמו + משתמשים מאותו household
      allow read: if isOwner(userId) || 
                     (isAuthenticated() && sameHousehold(userId));
      
      // כתיבה: רק עצמי
      allow write: if isOwner(userId);
    }
    
    // === Receipts Collection ===
    match /receipts/{receiptId} {
      // קריאה: רק משתמשים מאותו household
      allow read: if isAuthenticated() && 
                     isHouseholdMember(resource.data.household_id);
      
      // ✅ מתוקן: יצירה - חובה שהמסמך יכלול household_id תקין
      allow create: if isAuthenticated() && hasValidHouseholdId();
      
      allow update: if isAuthenticated() && 
                       isHouseholdMember(resource.data.household_id) &&
                       request.resource.data.household_id == resource.data.household_id; // מנע שינוי household_id
      
      allow delete: if isAuthenticated() && 
                       isHouseholdMember(resource.data.household_id);
    }
    
    // === Inventory Collection ===
    match /inventory/{itemId} {
      allow read: if isAuthenticated() && 
                     isHouseholdMember(resource.data.household_id);
      
      // ✅ מתוקן: יצירה
      allow create: if isAuthenticated() && hasValidHouseholdId();
      
      allow update: if isAuthenticated() && 
                       isHouseholdMember(resource.data.household_id) &&
                       request.resource.data.household_id == resource.data.household_id;
      
      allow delete: if isAuthenticated() && 
                       isHouseholdMember(resource.data.household_id);
    }
    
    // === Products Collection ===
    match /products/{productId} {
      // ✅ מתוקן: מוצרים פומביים - כולם יכולים לקרוא
      allow read: if true;
      
      // ✅ מתוקן: רק admin via Firebase Functions
      allow write: if false;
    }
    
    // === Shopping Lists Collection ===
    match /shopping_lists/{listId} {
      allow read: if isAuthenticated() && 
                     isHouseholdMember(resource.data.household_id);
      
      // ✅ מתוקן: יצירה
      allow create: if isAuthenticated() && hasValidHouseholdId();
      
      allow update: if isAuthenticated() && 
                       isHouseholdMember(resource.data.household_id) &&
                       request.resource.data.household_id == resource.data.household_id;
      
      allow delete: if isAuthenticated() && 
                       isHouseholdMember(resource.data.household_id);
    }
    
    // === Templates Collection ===
    match /templates/{templateId} {
      // קריאה: 
      // 1. תבניות מערכת (is_system=true)
      // 2. תבניות שאני יצרתי
      // 3. תבניות shared של חברי household
      allow read: if isAuthenticated() && (
        resource.data.is_system == true ||
        resource.data.user_id == request.auth.uid ||
        (resource.data.default_format == 'shared' && resource.data.household_id == getUserHouseholdId())
      );
      
      // ✅ מתוקן: יצירה - רק תבניות משתמש עם household_id תקין
      allow create: if isAuthenticated() && 
                       request.resource.data.is_system == false &&
                       request.resource.data.user_id == request.auth.uid &&
                       hasValidHouseholdId();
      
      // עדכון: רק תבניות שאני יצרתי + אותו household
      allow update: if isAuthenticated() && 
                       resource.data.is_system == false &&
                       resource.data.user_id == request.auth.uid &&
                       request.resource.data.household_id == resource.data.household_id;
      
      // מחיקה: רק תבניות שאני יצרתי
      allow delete: if isAuthenticated() && 
                       resource.data.is_system == false &&
                       resource.data.user_id == request.auth.uid;
    }
    
    // === Custom Locations Collection ===
    match /custom_locations/{locationId} {
      allow read: if isAuthenticated() && 
                     isHouseholdMember(resource.data.household_id);
      
      // ✅ כבר טוב! משתמש ב-getUserHouseholdId() ישירות
      allow create: if isAuthenticated() && 
                       request.resource.data.keys().hasAll(['household_id']) &&
                       request.resource.data.household_id == getUserHouseholdId();
      
      allow update: if isAuthenticated() && 
                       isHouseholdMember(resource.data.household_id) &&
                       request.resource.data.household_id == resource.data.household_id;
      
      allow delete: if isAuthenticated() && 
                       isHouseholdMember(resource.data.household_id);
    }
    
    // === Habits Collection ===
    match /habits/{habitId} {
      allow read: if isAuthenticated() && 
                     isHouseholdMember(resource.data.household_id);
      
      // ✅ מתוקן: יצירה
      allow create: if isAuthenticated() && hasValidHouseholdId();
      
      allow update: if isAuthenticated() && 
                       isHouseholdMember(resource.data.household_id) &&
                       request.resource.data.household_id == resource.data.household_id;
      
      allow delete: if isAuthenticated() && 
                       isHouseholdMember(resource.data.household_id);
    }
    
    // === Deny All Other Collections ===
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
