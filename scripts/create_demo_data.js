#!/usr/bin/env node

// üìÑ File: scripts/create_demo_data.js
// ◊™◊ô◊ê◊ï◊®: Script ◊ú◊ô◊¶◊ô◊®◊™ ◊†◊™◊ï◊†◊ô ◊ì◊û◊ï ◊û◊ú◊ê◊ô◊ù ◊¢◊ë◊ï◊® ◊û◊©◊™◊û◊©◊ô ◊î◊ì◊û◊ï
//
// ◊û◊î ◊î◊°◊ß◊®◊ô◊§◊ò ◊ô◊ï◊¶◊®:
// ‚úÖ 3 ◊®◊©◊ô◊û◊ï◊™ ◊ß◊†◊ô◊ï◊™ (2 ◊§◊¢◊ô◊ú◊ï◊™ + 1 ◊î◊ï◊©◊ú◊û◊î)
// ‚úÖ 15 ◊§◊®◊ô◊ò◊ô◊ù ◊ë◊û◊ú◊ê◊ô (◊õ◊û◊ï◊ô◊ï◊™ ◊©◊ï◊†◊ï◊™)
// ‚úÖ 2 ◊ß◊ë◊ú◊ï◊™ ◊†◊ï◊°◊§◊ï◊™ (◊ë◊†◊ï◊°◊£ ◊ú-6 ◊î◊ß◊ô◊ô◊û◊ï◊™)
//
// ◊©◊ô◊û◊ï◊©:
//   node scripts/create_demo_data.js

const admin = require('firebase-admin');
const path = require('path');

// ======== ◊î◊í◊ì◊®◊ï◊™ ========

const serviceAccountPath = path.join(__dirname, 'firebase-service-account.json');
const HOUSEHOLD_ID = 'house_demo';
const USER_ID = 'yoni_demo_user';

// ======== ◊ê◊™◊ó◊ï◊ú Firebase Admin ========

try {
  const serviceAccount = require(serviceAccountPath);
  
  admin.initializeApp({
    credential: admin.credential.cert(serviceAccount),
  });
  
  console.log('‚úÖ Firebase Admin initialized successfully\n');
} catch (error) {
  console.error('‚ùå Failed to initialize Firebase Admin:');
  console.error('   Error:', error.message);
  process.exit(1);
}

const db = admin.firestore();

// ======== ◊†◊™◊ï◊†◊ô ◊ì◊û◊ï ========

/**
 * ◊®◊©◊ô◊û◊ï◊™ ◊ß◊†◊ô◊ï◊™ (3)
 */
const DEMO_LISTS = [
  {
    id: 'list_weekly_groceries',
    name: '◊ß◊†◊ô◊ï◊™ ◊©◊ë◊ï◊¢◊ô◊ï◊™',
    type: 'super',
    status: 'active',
    items: [
      { name: '◊ó◊ú◊ë 3%', category: 'dairy', quantity: 2, unit: '◊ô◊ó', status: 'pending', notes: '' },
      { name: '◊ú◊ó◊ù ◊©◊ô◊§◊ï◊ü', category: 'bakery', quantity: 1, unit: '◊ô◊ó', status: 'pending', notes: '' },
      { name: '◊ë◊ô◊¶◊ô◊ù ◊í◊ì◊ï◊ú◊ï◊™', category: 'dairy', quantity: 1, unit: '◊ô◊ó', status: 'pending', notes: '' },
      { name: '◊¢◊í◊ë◊†◊ô◊ï◊™', category: 'vegetables', quantity: 1, unit: '◊ß"◊í', status: 'pending', notes: '' },
      { name: '◊û◊ú◊§◊§◊ï◊†◊ô◊ù', category: 'vegetables', quantity: 5, unit: '◊ô◊ó', status: 'pending', notes: '' },
      { name: '◊ô◊ï◊í◊ï◊®◊ò ◊™◊†◊ï◊ë◊î', category: 'dairy', quantity: 8, unit: '◊ô◊ó', status: 'pending', notes: '150 ◊í◊®◊ù' },
      { name: '◊©◊û◊ü ◊ñ◊ô◊™', category: 'dry_goods', quantity: 1, unit: '◊ô◊ó', status: 'pending', notes: '' },
      { name: '◊ê◊ï◊®◊ñ', category: 'dry_goods', quantity: 1, unit: '◊ß"◊í', status: 'pending', notes: '' },
    ],
  },
  {
    id: 'list_party_supplies',
    name: '◊ô◊ï◊ù ◊î◊ï◊ú◊ì◊™ ◊ú◊ô◊ú◊ì◊ô◊ù',
    type: 'event_birthday',
    status: 'active',
    items: [
      { name: '◊ë◊ú◊ï◊†◊ô◊ù ◊¶◊ë◊¢◊ï◊†◊ô◊ô◊ù', category: 'party_decoration', quantity: 2, unit: '◊ó◊ë◊ô◊ú◊ï◊™', status: 'pending', notes: '' },
      { name: '◊¶◊ú◊ó◊ï◊™ ◊ó◊ì ◊§◊¢◊û◊ô', category: 'disposables', quantity: 50, unit: '◊ô◊ó', status: 'taken', notes: '' },
      { name: '◊õ◊ï◊°◊ï◊™ ◊ó◊ì ◊§◊¢◊û◊ô', category: 'disposables', quantity: 50, unit: '◊ô◊ó', status: 'pending', notes: '' },
      { name: '◊¢◊ï◊í◊î', category: 'bakery', quantity: 1, unit: '◊ô◊ó', status: 'pending', notes: '◊ú◊î◊ñ◊û◊ô◊ü ◊û◊î◊ß◊ï◊†◊ì◊ô◊ò◊ï◊®◊ô◊î' },
      { name: '◊©◊™◊ô◊ô◊î ◊ß◊®◊î', category: 'beverages', quantity: 6, unit: '◊ë◊ß◊ë◊ï◊ß◊ô◊ù', status: 'pending', notes: '◊ß◊ï◊ú◊î ◊°◊§◊®◊ô◊ô◊ò' },
      { name: '◊ó◊ò◊ô◊§◊ô◊ù', category: 'snacks', quantity: 5, unit: '◊©◊ß◊ô◊ï◊™', status: 'taken', notes: '◊ë◊û◊ë◊î ◊ë◊ô◊°◊ú◊ô' },
    ],
  },
  {
    id: 'list_pharmacy_completed',
    name: '◊ë◊ô◊ß◊ï◊® ◊ë◊°◊ï◊§◊® ◊§◊ê◊®◊ù',
    type: 'pharmacy',
    status: 'completed',
    items: [
      { name: '◊©◊û◊§◊ï', category: 'toiletries', quantity: 1, unit: '◊ô◊ó', status: 'purchased', notes: '◊î◊ì ◊ê◊†◊ì ◊©◊ï◊ú◊ì◊®◊°' },
      { name: '◊û◊©◊ó◊™ ◊©◊ô◊†◊ô◊ô◊ù', category: 'toiletries', quantity: 2, unit: '◊ô◊ó', status: 'purchased', notes: '◊ß◊ï◊ú◊í◊ô◊ô◊ò' },
      { name: '◊°◊ë◊ï◊ü ◊†◊ï◊ñ◊ú◊ô', category: 'cleaning', quantity: 1, unit: '◊ô◊ó', status: 'purchased', notes: '' },
      { name: '◊ï◊ô◊ò◊û◊ô◊ü D', category: 'other', quantity: 1, unit: '◊ô◊ó', status: 'purchased', notes: '' },
    ],
  },
];

/**
 * ◊§◊®◊ô◊ò◊ô ◊û◊ú◊ê◊ô (15)
 */
const DEMO_INVENTORY = [
  { name: '◊ß◊û◊ó', category: 'dry_goods', quantity: 2, unit: '◊ß"◊í', location: '◊û◊ñ◊ï◊ï◊î', min_quantity: 1, expiry_date: null, notes: '' },
  { name: '◊°◊ï◊õ◊®', category: 'dry_goods', quantity: 1, unit: '◊ß"◊í', location: '◊û◊ñ◊ï◊ï◊î', min_quantity: 1, expiry_date: null, notes: '' },
  { name: '◊û◊ú◊ó', category: 'dry_goods', quantity: 1, unit: '◊ß"◊í', location: '◊û◊ñ◊ï◊ï◊î', min_quantity: 0.5, expiry_date: null, notes: '' },
  { name: '◊§◊°◊ò◊î', category: 'dry_goods', quantity: 3, unit: '◊ó◊ë◊ô◊ú◊ï◊™', location: '◊û◊ñ◊ï◊ï◊î', min_quantity: 2, expiry_date: null, notes: '' },
  { name: '◊ß◊ò◊©◊ï◊§', category: 'dry_goods', quantity: 1, unit: '◊ë◊ß◊ë◊ï◊ß', location: '◊û◊ß◊®◊®', min_quantity: 1, expiry_date: null, notes: '' },
  { name: '◊û◊ô◊ï◊†◊ñ', category: 'dry_goods', quantity: 0.5, unit: '◊ë◊ß◊ë◊ï◊ß', location: '◊û◊ß◊®◊®', min_quantity: 1, expiry_date: null, notes: '◊†◊í◊û◊® ◊ë◊ß◊®◊ï◊ë' },
  { name: '◊©◊û◊ü ◊ñ◊ô◊™', category: 'dry_goods', quantity: 0.5, unit: '◊ë◊ß◊ë◊ï◊ß', location: '◊û◊ñ◊ï◊ï◊î', min_quantity: 1, expiry_date: null, notes: '◊ú◊ß◊†◊ï◊™ ◊ë◊ß◊®◊ï◊ë' },
  { name: '◊ß◊§◊î', category: 'beverages', quantity: 1, unit: '◊ß◊ï◊§◊°◊î', location: '◊û◊ñ◊ï◊ï◊î', min_quantity: 1, expiry_date: null, notes: '' },
  { name: '◊™◊î', category: 'beverages', quantity: 20, unit: '◊©◊ß◊ô◊ß◊ô◊ù', location: '◊û◊ñ◊ï◊ï◊î', min_quantity: 10, expiry_date: null, notes: '' },
  { name: '◊©◊û◊ü ◊ß◊†◊ï◊ú◊î', category: 'dry_goods', quantity: 0.8, unit: '◊ë◊ß◊ë◊ï◊ß', location: '◊û◊ñ◊ï◊ï◊î', min_quantity: 1, expiry_date: null, notes: '' },
  { name: '◊ê◊ï◊®◊ñ ◊ë◊°◊û◊ò◊ô', category: 'dry_goods', quantity: 5, unit: '◊ß"◊í', location: '◊û◊ñ◊ï◊ï◊î', min_quantity: 2, expiry_date: null, notes: '' },
  { name: '◊ó◊ï◊û◊ï◊° ◊û◊©◊ï◊û◊®', category: 'dry_goods', quantity: 4, unit: '◊ß◊ï◊§◊°◊ê◊ï◊™', location: '◊û◊ñ◊ï◊ï◊î', min_quantity: 2, expiry_date: null, notes: '' },
  { name: '◊ò◊ï◊†◊î', category: 'dry_goods', quantity: 6, unit: '◊ß◊ï◊§◊°◊ê◊ï◊™', location: '◊û◊ñ◊ï◊ï◊î', min_quantity: 3, expiry_date: null, notes: '' },
  { name: '◊†◊ô◊ô◊® ◊ò◊ï◊ê◊ú◊ò', category: 'cleaning', quantity: 12, unit: '◊í◊ú◊ô◊ú◊ô◊ù', location: '◊©◊ô◊®◊ï◊™◊ô◊ù', min_quantity: 8, expiry_date: null, notes: '' },
  { name: '◊°◊ë◊ï◊ü ◊õ◊ú◊ô◊ù', category: 'cleaning', quantity: 1, unit: '◊ë◊ß◊ë◊ï◊ß', location: '◊û◊ò◊ë◊ó', min_quantity: 1, expiry_date: null, notes: '' },
];

/**
 * ◊ß◊ë◊ú◊ï◊™ ◊†◊ï◊°◊§◊ï◊™ (2)
 */
const DEMO_RECEIPTS = [
  {
    id: 'receipt_shufersal_recent',
    store_name: '◊©◊ï◊§◊®◊°◊ú',
    date: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000), // ◊ú◊§◊†◊ô 3 ◊ô◊ï◊ù
    total: 287.50,
    items: [
      { name: '◊ó◊ú◊ë 3%', price: 6.90, quantity: 2 },
      { name: '◊ú◊ó◊ù ◊©◊ô◊§◊ï◊ü', price: 8.50, quantity: 1 },
      { name: '◊í◊ë◊ô◊†◊î ◊¶◊î◊ï◊ë◊î', price: 35.90, quantity: 1 },
      { name: '◊ô◊ï◊í◊ï◊®◊ò', price: 5.50, quantity: 8 },
      { name: '◊¢◊í◊ë◊†◊ô◊ï◊™', price: 6.90, quantity: 1 },
      { name: '◊û◊ú◊§◊§◊ï◊†◊ô◊ù', price: 2.50, quantity: 5 },
      { name: '◊ë◊†◊†◊ï◊™', price: 8.90, quantity: 1 },
      { name: '◊™◊§◊ï◊ó◊ô◊ù', price: 12.90, quantity: 1 },
      { name: '◊§◊°◊ò◊î', price: 7.90, quantity: 3 },
      { name: '◊®◊ï◊ò◊ë ◊¢◊í◊ë◊†◊ô◊ï◊™', price: 8.50, quantity: 2 },
      { name: '◊ß◊§◊î', price: 32.90, quantity: 1 },
      { name: '◊©◊û◊ü ◊ñ◊ô◊™', price: 29.90, quantity: 1 },
      { name: '◊ó◊ï◊û◊ï◊°', price: 10.50, quantity: 4 },
      { name: '◊ò◊ï◊†◊î', price: 6.90, quantity: 6 },
      { name: '◊†◊ô◊ô◊® ◊ò◊ï◊ê◊ú◊ò', price: 34.90, quantity: 1 },
    ],
    image_path: null,
  },
  {
    id: 'receipt_ramilevy_recent',
    store_name: '◊®◊û◊ô ◊ú◊ï◊ô',
    date: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000), // ◊ú◊§◊†◊ô ◊©◊ë◊ï◊¢
    total: 195.80,
    items: [
      { name: '◊ó◊ú◊ë 3%', price: 6.50, quantity: 2 },
      { name: '◊ë◊ô◊¶◊ô◊ù ◊í◊ì◊ï◊ú◊ï◊™', price: 18.90, quantity: 1 },
      { name: '◊ú◊ó◊ù', price: 7.90, quantity: 1 },
      { name: '◊í◊ë◊ô◊†◊î ◊ú◊ë◊†◊î', price: 7.90, quantity: 2 },
      { name: '◊ß◊ï◊ò◊í◊≥', price: 7.50, quantity: 2 },
      { name: '◊¢◊í◊ë◊†◊ô◊ï◊™', price: 5.90, quantity: 2 },
      { name: '◊û◊ú◊§◊§◊ï◊†◊ô◊ù', price: 2.20, quantity: 6 },
      { name: '◊ë◊¶◊ú', price: 4.90, quantity: 1 },
      { name: '◊©◊ï◊ù', price: 8.90, quantity: 1 },
      { name: '◊ê◊ï◊®◊ñ', price: 15.90, quantity: 2 },
      { name: '◊©◊û◊ü ◊ß◊†◊ï◊ú◊î', price: 12.90, quantity: 1 },
      { name: '◊°◊ï◊õ◊®', price: 9.90, quantity: 1 },
      { name: '◊ß◊û◊ó', price: 8.90, quantity: 2 },
      { name: '◊°◊ë◊ï◊ü ◊õ◊ú◊ô◊ù', price: 9.90, quantity: 1 },
    ],
    image_path: null,
  },
];

// ======== ◊§◊ï◊†◊ß◊¶◊ô◊ï◊™ ◊ô◊¶◊ô◊®◊î ========

/**
 * ◊ô◊ï◊¶◊® UUID ◊§◊©◊ï◊ò
 */
function generateId() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    const r = Math.random() * 16 | 0;
    const v = c === 'x' ? r : (r & 0x3 | 0x8);
    return v.toString(16);
  });
}

/**
 * ◊ô◊ï◊¶◊® ◊®◊©◊ô◊û◊™ ◊ß◊†◊ô◊ï◊™
 */
async function createShoppingList(listData) {
  const { id, name, type, status, items } = listData;
  
  console.log(`üìã Creating shopping list: ${name}`);
  
  try {
    const now = admin.firestore.Timestamp.now();
    
    // ◊î◊û◊®◊™ items ◊ú◊§◊ï◊®◊û◊ò ◊†◊õ◊ï◊ü
    const formattedItems = items.map(item => ({
      id: generateId(),
      name: item.name,
      category: item.category,
      quantity: item.quantity,
      unit: item.unit,
      status: item.status,
      notes: item.notes,
      price: null,
      barcode: null,
      added_by: USER_ID,
      added_date: now,
      updated_date: now,
    }));
    
    const listDoc = {
      id: id,
      name: name,
      type: type,
      status: status,
      household_id: HOUSEHOLD_ID,
      created_by: USER_ID,
      created_date: now,
      updated_date: now,
      items: formattedItems,
      tags: [],
    };
    
    await db.collection('shopping_lists').doc(id).set(listDoc);
    console.log(`   ‚úÖ Created with ${items.length} items`);
  } catch (error) {
    console.error(`   ‚ùå Failed: ${error.message}`);
    throw error;
  }
}

/**
 * ◊ô◊ï◊¶◊® ◊§◊®◊ô◊ò ◊û◊ú◊ê◊ô
 */
async function createInventoryItem(itemData) {
  const id = generateId();
  
  try {
    const now = admin.firestore.Timestamp.now();
    
    const itemDoc = {
      id: id,
      name: itemData.name,
      category: itemData.category,
      quantity: itemData.quantity,
      unit: itemData.unit,
      location: itemData.location,
      min_quantity: itemData.min_quantity,
      expiry_date: itemData.expiry_date,
      notes: itemData.notes,
      household_id: HOUSEHOLD_ID,
      added_by: USER_ID,
      added_date: now,
      updated_date: now,
    };
    
    await db.collection('inventory').doc(id).set(itemDoc);
  } catch (error) {
    console.error(`   ‚ùå Failed to create inventory item: ${error.message}`);
    throw error;
  }
}

/**
 * ◊ô◊ï◊¶◊® ◊ß◊ë◊ú◊î
 */
async function createReceipt(receiptData) {
  const { id, store_name, date, total, items, image_path } = receiptData;
  
  console.log(`üßæ Creating receipt: ${store_name} - ${total} ‚Ç™`);
  
  try {
    const timestamp = admin.firestore.Timestamp.fromDate(date);
    
    // ◊î◊û◊®◊™ items ◊ú◊§◊ï◊®◊û◊ò ◊†◊õ◊ï◊ü
    const formattedItems = items.map(item => ({
      name: item.name,
      price: item.price,
      quantity: item.quantity,
      total: item.price * item.quantity,
    }));
    
    const receiptDoc = {
      id: id,
      store_name: store_name,
      date: timestamp,
      total: total,
      items: formattedItems,
      image_path: image_path,
      household_id: HOUSEHOLD_ID,
      uploaded_by: USER_ID,
      created_date: admin.firestore.Timestamp.now(),
    };
    
    await db.collection('receipts').doc(id).set(receiptDoc);
    console.log(`   ‚úÖ Created with ${items.length} items`);
  } catch (error) {
    console.error(`   ‚ùå Failed: ${error.message}`);
    throw error;
  }
}

// ======== Main ========

async function main() {
  console.log('üöÄ Starting demo data creation...\n');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
  
  let stats = {
    lists: 0,
    inventory: 0,
    receipts: 0,
    errors: 0,
  };
  
  // ◊ô◊¶◊ô◊®◊™ ◊®◊©◊ô◊û◊ï◊™ ◊ß◊†◊ô◊ï◊™
  console.log('üìã Creating shopping lists...\n');
  for (const list of DEMO_LISTS) {
    try {
      await createShoppingList(list);
      stats.lists++;
    } catch (error) {
      stats.errors++;
    }
  }
  console.log();
  
  // ◊ô◊¶◊ô◊®◊™ ◊§◊®◊ô◊ò◊ô ◊û◊ú◊ê◊ô
  console.log('üì¶ Creating inventory items...\n');
  for (const item of DEMO_INVENTORY) {
    try {
      await createInventoryItem(item);
      stats.inventory++;
      if (stats.inventory % 5 === 0) {
        console.log(`   üì¶ Created ${stats.inventory}/${DEMO_INVENTORY.length} items...`);
      }
    } catch (error) {
      stats.errors++;
    }
  }
  console.log(`   ‚úÖ All ${stats.inventory} inventory items created\n`);
  
  // ◊ô◊¶◊ô◊®◊™ ◊ß◊ë◊ú◊ï◊™
  console.log('üßæ Creating receipts...\n');
  for (const receipt of DEMO_RECEIPTS) {
    try {
      await createReceipt(receipt);
      stats.receipts++;
    } catch (error) {
      stats.errors++;
    }
  }
  console.log();
  
  // ◊°◊ô◊õ◊ï◊ù
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
  console.log('üìä Summary:');
  console.log(`   üìã Shopping Lists: ${stats.lists}/${DEMO_LISTS.length}`);
  console.log(`   üì¶ Inventory Items: ${stats.inventory}/${DEMO_INVENTORY.length}`);
  console.log(`   üßæ Receipts: ${stats.receipts}/${DEMO_RECEIPTS.length}`);
  console.log(`   ‚ùå Errors: ${stats.errors}\n`);
  
  if (stats.errors === 0) {
    console.log('üéâ All demo data created successfully!\n');
    console.log('üì± Now you can login and see:');
    console.log('   ‚Ä¢ 3 shopping lists (2 active + 1 completed)');
    console.log('   ‚Ä¢ 15 inventory items (with low stock warnings)');
    console.log('   ‚Ä¢ 8 receipts total (6 existing + 2 new)');
    console.log('   ‚Ä¢ Realistic statistics in Settings\n');
  } else {
    console.log('‚ö†Ô∏è  Some data failed to create. Check the logs above.\n');
  }
  
  process.exit(stats.errors === 0 ? 0 : 1);
}

// ◊î◊®◊¶◊î
main().catch(error => {
  console.error('\n‚ùå Fatal error:', error);
  process.exit(1);
});
