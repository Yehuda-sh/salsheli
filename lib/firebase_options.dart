// 📄 File: lib/firebase_options.dart
// תיאור: Firebase configuration - generated by FlutterFire CLI
// ⚠️ Mobile Only: Android + iOS support only
//
// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// **מטרה:** התאמת הגדרות Firebase לפלטפורמה הנוכחית
/// (Android/iOS בלבד - mobile-only)
///
/// **שימוש:**
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
///
/// **פלטפורמות נתמכות:**
/// - ✅ Android (כולל Firebase messaging)
/// - ✅ iOS (עם bundle ID)
/// - ❌ Web: לא מוגדר - השתמש ב-FlutterFire CLI
/// - ❌ macOS, Windows, Linux: לא מוגדרים
///
/// **הערה:** קובץ זה נוצר על ידי FlutterFire CLI.
/// כדי לעדכן: `flutterfire configure`
class DefaultFirebaseOptions {
  /// קבלת Firebase options עבור הפלטפורמה הנוכחית
  ///
  /// **לוגיקה:**
  /// 1. בדיקה אם זה web (kIsWeb) → בדיקה כשל UnsupportedError
  /// 2. בדיקה platform דרך defaultTargetPlatform:
  ///    - Android → מחזיר android constants
  ///    - iOS → מחזיר ios constants
  ///    - כל שאר ה-platforms → UnsupportedError
  ///
  /// **שגיאות:**
  /// - Web: "לא מוגדר, השתמש ב-FlutterFire CLI"
  /// - macOS, Windows, Linux: "לא מוגדר"
  /// - פלטפורמה לא ידועה: "לא תמך"
  ///
  /// **Note:** זה getter static - קורא בכל init של Firebase
  ///
  /// Returns: FirebaseOptions עבור ה-platform הנוכחי
  /// Throws: UnsupportedError אם platform לא תומך
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      throw UnsupportedError(
        'DefaultFirebaseOptions have not been configured for web - '
        'you can reconfigure this by running the FlutterFire CLI again.',
      );
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  /// Firebase options עבור Android
  ///
  /// **פרטים:**
  /// - API Key: מקום לבקשות Firebase REST
  /// - App ID: מזהה ייחודי לאפליקציה Android
  /// - Messaging Sender ID: עבור Firebase Cloud Messaging (FCM)
  /// - Project ID: זהה ל-Firestore project ID ("salsheli")
  /// - Storage Bucket: Firebase Storage (images, backups וכו')
  ///
  /// **סטטוס:**
  /// - ✅ Firestore: תומך
  /// - ✅ FCM (Push notifications): תומך
  /// - ✅ Storage: תומך
  /// - ✅ Auth: תומך
  ///
  /// **ביטחון:**
  /// - API Key ציבוריות (בrestrictions בקונסול Firebase)
  /// - Bundle ID לא נדרש (Android בשונה מ-iOS)
  /// - Sensitive data: לא לשמור passwords או tokens
  ///
  /// Generated by FlutterFire CLI - עדכן עם `flutterfire configure`
  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'AIzaSyAbwt3M7vZsfTxaZgROav3_PBb2ST8X_NQ',
    appId: '1:189577355895:android:9c1a6494da76b6a94adc72',
    messagingSenderId: '189577355895',
    projectId: 'salsheli',
    storageBucket: 'salsheli.firebasestorage.app',
  );

  /// Firebase options עבור iOS
  ///
  /// **פרטים:**
  /// - API Key: מקום לבקשות Firebase REST (שונה מ-Android)
  /// - App ID: מזהה ייחודי לאפליקציה iOS
  /// - Messaging Sender ID: עבור Firebase Cloud Messaging (FCM)
  /// - Project ID: זהה ל-Firestore project ID ("salsheli")
  /// - Storage Bucket: Firebase Storage
  /// - iOS Bundle ID: חובה ל-iOS (com.example.salsheli)
  ///
  /// **סטטוס:**
  /// - ✅ Firestore: תומך
  /// - ✅ FCM (Push notifications): תומך דרך APNs
  /// - ✅ Storage: תומך
  /// - ✅ Auth: תומך
  ///
  /// **ביטחון:**
  /// - API Key ציבוריות (עם restrictions בקונסול)
  /// - Bundle ID חובה לזיהוי אפליקציה
  /// - Sensitive data: לא לשמור passwords או tokens
  ///
  /// **הערה:** Bundle ID צריך להיות שווה ל-bundleIdentifier ב-Xcode
  /// (ios/Runner.xcodeproj configuration)
  ///
  /// Generated by FlutterFire CLI - עדכן עם `flutterfire configure`
  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: 'AIzaSyCLm8Vwp5XDrDiHro5zf0dXPwJbPOKiYeE',
    appId: '1:189577355895:ios:dc3448273ef5d0764adc72',
    messagingSenderId: '189577355895',
    projectId: 'salsheli',
    storageBucket: 'salsheli.firebasestorage.app',
    iosBundleId: 'com.example.salsheli',
  );
}
