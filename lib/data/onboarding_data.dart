// ЁЯУД File: lib/data/onboarding_data.dart
// ╫к╫Щ╫Р╫Х╫и: ╫Ю╫Х╫У╫Ь ╫а╫к╫Х╫а╫Щ Onboarding + ╫д╫Х╫а╫з╫ж╫Щ╫Х╫к ╫й╫Ю╫Щ╫и╫Ф/╫Ш╫в╫Щ╫а╫Ф/╫а╫Щ╫Ф╫Х╫Ь
//
// Version: 2.0 - Enhanced with validation, namespacing, and schema versioning
// Last Updated: 15/10/2025
//
// ╫Ы╫Х╫Ь╫Ь:
// - ╫Ю╫Х╫У╫Ь OnboardingData ╫в╫Э ╫Ы╫Ь ╫й╫У╫Х╫к ╫Ф╫Ф╫в╫У╫д╫Х╫к
// - ╫д╫Х╫а╫з╫ж╫Щ╫Х╫к save/load/reset ╫Ь╫в╫С╫Х╫У╫Ф ╫в╫Э SharedPreferences
// - ╫а╫Щ╫Ф╫Х╫Ь ╫б╫Ш╫Ш╫Х╫б "╫б╫Щ╫Щ╫Э Onboarding"
// - ╫Х╫Х╫Ь╫Щ╫У╫ж╫Щ╫Ф ╫Ю╫Ь╫Р╫Ф ╫Ь╫Ы╫Ь ╫Ф╫й╫У╫Х╫к + ╫б╫Щ╫а╫Х╫Я ╫в╫и╫Ы╫Щ╫Э ╫Ь╫Р ╫к╫з╫Щ╫а╫Щ╫Э
// - Logging ╫Ю╫д╫Х╫и╫Ш ╫Ь╫У╫Щ╫С╫Х╫Т (kDebugMode only)
// - Namespacing ╫Ь╫Ю╫д╫к╫Ч╫Х╫к (onboarding.*)
// - Schema versioning ╫Ь╫Ю╫Щ╫Т╫и╫ж╫Щ╫Х╫к ╫в╫к╫Щ╫У╫Щ╫Х╫к
// - TimeOfDay helpers
//
// ╫й╫Щ╫Ю╫Х╫й:
// ```dart
// // ╫Ш╫в╫Щ╫а╫к ╫а╫к╫Х╫а╫Щ╫Э
// final data = await OnboardingData.load();
//
// // ╫в╫У╫Ы╫Х╫Я
// final updated = data.copyWith(familySize: 4);
// await updated.save();
//
// // ╫б╫Щ╫Ю╫Х╫Я ╫б╫Щ╫Х╫Э
// await OnboardingData.markAsCompleted();
//
// // ╫С╫У╫Щ╫з╫Ф ╫Р╫Э ╫в╫С╫и onboarding
// final hasSeenIt = await OnboardingData.hasSeenOnboarding();
//
// // TimeOfDay helpers
// final time = OnboardingData.parseTime('09:30'); // TimeOfDay(hour: 9, minute: 30)
// final str = OnboardingData.formatTime(TimeOfDay(hour: 9, minute: 30)); // '09:30'
// ```

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../core/constants.dart';
import '../config/stores_config.dart';

// ========================================
// ╫Ю╫д╫к╫Ч╫Х╫к SharedPreferences
// ========================================

/// ╫Ю╫д╫к╫Ч╫Х╫к ╫Ь╫й╫Ю╫Щ╫и╫Ф ╫С-SharedPreferences
///
/// тЪая╕П CRITICAL: ╫Р╫Ь ╫к╫й╫а╫Ф ╫й╫Ю╫Х╫к ╫Ю╫д╫к╫Ч╫Х╫к ╫Ь╫Ь╫Р ╫Ю╫Щ╫Т╫и╫ж╫Щ╫Ф!
/// 
/// ╫Ы╫Ь ╫Ф╫Ю╫д╫к╫Ч╫Х╫к ╫С╫Ю╫з╫Х╫Э ╫Р╫Ч╫У - ╫з╫Ь ╫Ь╫а╫Щ╫Ф╫Х╫Ь ╫Х╫Ю╫а╫Щ╫в╫к ╫й╫Т╫Щ╫Р╫Х╫к.
/// ╫Ы╫Ь ╫Ю╫д╫к╫Ч ╫Ю╫к╫Ч╫Щ╫Ь ╫С-`onboarding.` ╫Ь╫Ю╫а╫Щ╫в╫к ╫Ф╫к╫а╫Т╫й╫Х╫Щ╫Х╫к ╫в╫Э Providers ╫Р╫Ч╫и╫Щ╫Э.
/// 
/// **╫к╫Р╫Щ╫Ю╫Х╫к ╫Ь╫Р╫Ч╫Х╫и:**
/// ╫Р╫Э ╫ж╫и╫Щ╫Ъ ╫Ь╫й╫а╫Х╫к ╫й╫Э ╫Ю╫д╫к╫Ч:
/// 1. ╫Ф╫Х╫б╫г ╫Ю╫д╫к╫Ч ╫Ч╫У╫й
/// 2. ╫Ф╫Х╫б╫г ╫Ь╫Х╫Т╫Щ╫з╫к ╫Ю╫Щ╫Т╫и╫ж╫Щ╫Ф ╫С-load() ╫й╫Ю╫в╫к╫Щ╫з╫Ф ╫Ю╫Щ╫й╫Я ╫Ь╫Ч╫У╫й
/// 3. ╫Ь╫Р╫Ч╫и ╫Ю╫б╫д╫и ╫Т╫и╫б╫Р╫Х╫к, ╫Ю╫Ч╫з ╫Р╫к ╫Ф╫Щ╫й╫Я
class OnboardingPrefsKeys {
  // ╫Ю╫а╫Щ╫в╫к instances
  const OnboardingPrefsKeys._();

  // Schema version - ╫Ь╫в╫У╫Ы╫Х╫Я ╫в╫к╫Щ╫У╫Щ ╫й╫Ь ╫Ю╫С╫а╫Ф ╫а╫к╫Х╫а╫Щ╫Э
  static const schemaVersion = 'onboarding.schemaVersion';
  
  // ╫а╫к╫Х╫а╫Щ Onboarding
  static const seenOnboarding = 'onboarding.seenOnboarding';
  static const familySize = 'onboarding.familySize';
  static const preferredStores = 'onboarding.preferredStores';
  static const shoppingFrequency = 'onboarding.shoppingFrequency'; // ╫д╫в╫Ю╫Щ╫Э ╫С╫й╫С╫Х╫в
  static const shoppingDays = 'onboarding.shoppingDays'; // ╫Щ╫Ю╫Щ╫Э ╫з╫С╫Х╫в╫Щ╫Э (0-6)
  static const hasChildren = 'onboarding.hasChildren';
  static const childrenAges = 'onboarding.childrenAges'; // ╫Т╫Щ╫Ь╫Р╫Щ ╫Щ╫Ь╫У╫Щ╫Э
  static const shareLists = 'onboarding.shareLists';
  static const reminderTime = 'onboarding.reminderTime'; // ╫д╫Х╫и╫Ю╫Ш: HH:MM
}

// ========================================
// Schema Version
// ========================================

/// ╫Т╫и╫б╫к Schema ╫а╫Х╫Ы╫Ч╫Щ╫к
/// 
/// ╫Ы╫й╫Ю╫й╫а╫Щ╫Э ╫Р╫к ╫Ю╫С╫а╫Ф ╫Ф╫а╫к╫Х╫а╫Щ╫Э (╫Ю╫Х╫б╫Щ╫д╫Щ╫Э ╫й╫У╫Х╫к, ╫Ю╫й╫а╫Щ╫Э ╫Ш╫Щ╫д╫Х╫б╫Щ╫Э, ╫Х╫Ы╫Х'):
/// 1. ╫Ф╫в╫Ь╫Ф ╫Р╫к ╫Ф╫Ю╫б╫д╫и
/// 2. ╫Ф╫Х╫б╫г ╫Ь╫Х╫Т╫Щ╫з╫к ╫Ю╫Щ╫Т╫и╫ж╫Щ╫Ф ╫С-load()
const int kCurrentSchemaVersion = 1;

// ========================================
// ╫Ю╫Х╫У╫Ь ╫а╫к╫Х╫а╫Щ╫Э
// ========================================

/// ╫Ю╫Х╫У╫Ь ╫а╫к╫Х╫а╫Щ Onboarding
///
/// ╫Ю╫Ы╫Щ╫Ь ╫Р╫к ╫Ы╫Ь ╫Ф╫Ф╫в╫У╫д╫Х╫к ╫й╫а╫Р╫б╫д╫Х╫к ╫С╫Ю╫Ф╫Ь╫Ъ ╫к╫Ф╫Ь╫Щ╫Ъ ╫Ф-onboarding.
/// ╫Ф╫Ю╫Х╫У╫Ь ╫Щ╫Х╫У╫в ╫Ь╫й╫Ю╫Х╫и ╫Х╫Ь╫Ш╫в╫Х╫Я ╫Р╫к ╫в╫ж╫Ю╫Х ╫Ю-SharedPreferences.
///
/// **╫к╫Ы╫Х╫а╫Х╫к:**
/// - Validation ╫Р╫Х╫Ш╫Х╫Ю╫Ш╫Щ ╫Ь╫Ы╫Ь ╫Ф╫й╫У╫Х╫к
/// - ╫б╫Щ╫а╫Х╫Я ╫в╫и╫Ы╫Щ╫Э ╫Ь╫Р ╫к╫з╫Щ╫а╫Щ╫Э (╫Ч╫а╫Х╫Щ╫Х╫к/╫з╫Ш╫Т╫Х╫и╫Щ╫Х╫к ╫Ь╫Р ╫з╫Щ╫Щ╫Ю╫Х╫к)
/// - Logging ╫Ю╫д╫Х╫и╫Ш (kDebugMode only)
/// - ╫а╫Щ╫Ф╫Х╫Ь ╫б╫Ш╫Ш╫Х╫б "╫б╫Щ╫Щ╫Э Onboarding"
/// - Namespacing ╫Ь╫Ю╫а╫Щ╫в╫к ╫Ф╫к╫а╫Т╫й╫Х╫Щ╫Х╫к
/// - Schema versioning ╫Ь╫Ю╫Щ╫Т╫и╫ж╫Щ╫Х╫к
class OnboardingData {
  final int familySize;
  final Set<String> preferredStores;
  final int shoppingFrequency; // ╫д╫в╫Ю╫Щ╫Э ╫С╫й╫С╫Х╫в (1-7)
  final Set<int> shoppingDays; // ╫Щ╫Ю╫Щ╫Э ╫з╫С╫Х╫в╫Щ╫Э (0=╫и╫Р╫й╫Х╫Я, 6=╫й╫С╫к)
  final bool hasChildren;
  final Set<String> childrenAges; // ╫Т╫Щ╫Ь╫Р╫Щ ╫Щ╫Ь╫У╫Щ╫Э
  final bool shareLists;
  final String reminderTime; // ╫д╫Х╫и╫Ю╫Ш: HH:MM

  OnboardingData({
    int? familySize,
    Set<String>? preferredStores,
    int? shoppingFrequency,
    Set<int>? shoppingDays,
    this.hasChildren = false,
    Set<String>? childrenAges,
    this.shareLists = false,
    String? reminderTime,
  })  : familySize = _validateFamilySize(familySize ?? 2),
        preferredStores = _filterValidStores(preferredStores ?? {}),
        shoppingFrequency = _validateShoppingFrequency(shoppingFrequency ?? 2),
        shoppingDays = _filterValidDays(shoppingDays ?? {}),
        childrenAges = _filterValidAges(childrenAges ?? {}),
        reminderTime = _validateTime(reminderTime ?? '09:00');

  // ========================================
  // ╫Х╫Х╫Ь╫Щ╫У╫ж╫Щ╫Ф
  // ========================================

  /// ╫С╫У╫Щ╫з╫к ╫к╫з╫Щ╫а╫Х╫к ╫Т╫Х╫У╫Ь ╫Ю╫й╫д╫Ч╫Ф
  static int _validateFamilySize(int size) {
    if (size < kMinFamilySize) {
      if (kDebugMode) {
        debugPrint(
          'тЪая╕П OnboardingData: ╫Т╫Х╫У╫Ь ╫Ю╫й╫д╫Ч╫Ф ╫з╫Ш╫Я ╫Ю╫У╫Щ ($size), ╫Ю╫й╫к╫Ю╫й ╫С╫Ю╫Щ╫а╫Щ╫Ю╫Х╫Э $kMinFamilySize',
        );
      }
      return kMinFamilySize;
    }
    if (size > kMaxFamilySize) {
      if (kDebugMode) {
        debugPrint(
          'тЪая╕П OnboardingData: ╫Т╫Х╫У╫Ь ╫Ю╫й╫д╫Ч╫Ф ╫Т╫У╫Х╫Ь ╫Ю╫У╫Щ ($size), ╫Ю╫й╫к╫Ю╫й ╫С╫Ю╫з╫б╫Щ╫Ю╫Х╫Э $kMaxFamilySize',
        );
      }
      return kMaxFamilySize;
    }
    return size;
  }

  /// ╫С╫У╫Щ╫з╫к ╫к╫з╫Щ╫а╫Х╫к ╫к╫У╫Щ╫и╫Х╫к ╫з╫а╫Щ╫Х╫к
  static int _validateShoppingFrequency(int frequency) {
    if (frequency < 1) {
      if (kDebugMode) {
        debugPrint(
          'тЪая╕П OnboardingData: ╫к╫У╫Щ╫и╫Х╫к ╫з╫Ш╫а╫Ф ╫Ю╫У╫Щ ($frequency), ╫Ю╫й╫к╫Ю╫й ╫С╫Ю╫Щ╫а╫Щ╫Ю╫Х╫Э 1',
        );
      }
      return 1;
    }
    if (frequency > 7) {
      if (kDebugMode) {
        debugPrint(
          'тЪая╕П OnboardingData: ╫к╫У╫Щ╫и╫Х╫к ╫Т╫У╫Х╫Ь╫Ф ╫Ю╫У╫Щ ($frequency), ╫Ю╫й╫к╫Ю╫й ╫С╫Ю╫з╫б╫Щ╫Ю╫Х╫Э 7',
        );
      }
      return 7;
    }
    return frequency;
  }

  /// ╫б╫Щ╫а╫Х╫Я ╫Щ╫Ю╫Щ ╫з╫а╫Щ╫Х╫к ╫к╫з╫Щ╫а╫Щ╫Э ╫С╫Ь╫С╫У (0-6)
  static Set<int> _filterValidDays(Set<int> days) {
    final validDays = days.where((day) => day >= 0 && day <= 6).toSet();
    
    if (kDebugMode && days.length != validDays.length) {
      final invalid = days.difference(validDays);
      debugPrint(
        'тЪая╕П OnboardingData: ╫Ф╫Х╫б╫и╫Х ╫Щ╫Ю╫Щ╫Э ╫Ь╫Р ╫к╫з╫Щ╫а╫Щ╫Э: ${invalid.join(', ')}',
      );
    }
    
    return validDays;
  }

  /// ╫б╫Щ╫а╫Х╫Я ╫Т╫Щ╫Ь╫Р╫Щ ╫Щ╫Ь╫У╫Щ╫Э ╫к╫з╫Щ╫а╫Щ╫Э ╫С╫Ь╫С╫У
  static Set<String> _filterValidAges(Set<String> ages) {
    const validAges = {'babies', 'toddlers', 'children', 'teens'};
    final filtered = ages.where(validAges.contains).toSet();
    
    if (kDebugMode && ages.length != filtered.length) {
      final invalid = ages.difference(filtered);
      debugPrint(
        'тЪая╕П OnboardingData: ╫Ф╫Х╫б╫и╫Х ╫Т╫Щ╫Ь╫Р╫Щ╫Э ╫Ь╫Р ╫к╫з╫Щ╫а╫Щ╫Э: ${invalid.join(', ')}',
      );
    }
    
    return filtered;
  }

  /// ╫б╫Щ╫а╫Х╫Я ╫Ч╫а╫Х╫Щ╫Х╫к ╫к╫з╫Щ╫а╫Х╫к ╫С╫Ь╫С╫У
  /// 
  /// ╫Ю╫б╫Щ╫и ╫Ч╫а╫Х╫Щ╫Х╫к ╫й╫Ь╫Р ╫з╫Щ╫Щ╫Ю╫Х╫к ╫С-StoresConfig.allStores
  static Set<String> _filterValidStores(Set<String> stores) {
    final validStores = stores.where(StoresConfig.isValid).toSet();
    
    if (kDebugMode && stores.length != validStores.length) {
      final invalid = stores.difference(validStores);
      debugPrint(
        'тЪая╕П OnboardingData: ╫Ф╫Х╫б╫и╫Х ╫Ч╫а╫Х╫Щ╫Х╫к ╫Ь╫Р ╫к╫з╫Щ╫а╫Х╫к: ${invalid.join(', ')}',
      );
    }
    
    return validStores;
  }



  /// ╫С╫У╫Щ╫з╫к ╫к╫з╫Щ╫а╫Х╫к ╫д╫Х╫и╫Ю╫Ш ╫Ц╫Ю╫Я
  /// 
  /// ╫Ю╫з╫С╫Ь: "HH:MM" (24h format)
  /// ╫Ю╫Ч╫Ц╫Щ╫и: "HH:MM" ╫к╫з╫Щ╫Я ╫в╫Э ╫Р╫д╫б╫Щ╫Э ╫Ю╫Х╫С╫Щ╫Ь╫Щ╫Э, ╫Р╫Х "09:00" ╫Р╫Э ╫Ь╫Р ╫к╫з╫Щ╫Я
  static String _validateTime(String time) {
    try {
      final parts = time.split(':');
      if (parts.length != 2) throw const FormatException('╫д╫Х╫и╫Ю╫Ш ╫Ь╫Р ╫к╫з╫Щ╫Я');

      final hour = int.parse(parts[0]);
      final minute = int.parse(parts[1]);

      if (hour < 0 || hour > 23 || minute < 0 || minute > 59) {
        throw RangeError('╫й╫в╫Ф ╫Р╫Х ╫У╫з╫Ф ╫Ь╫Р ╫Ч╫Х╫з╫Щ╫Х╫к');
      }

      // ╫Ю╫Ч╫Ц╫Щ╫и ╫С╫д╫Х╫и╫Ю╫Ш ╫к╫з╫Щ╫Я ╫в╫Э ╫Р╫д╫б╫Щ╫Э ╫Ю╫Х╫С╫Щ╫Ь╫Щ╫Э
      final formatted = '${hour.toString().padLeft(2, '0')}:${minute.toString().padLeft(2, '0')}';
      
      // ╫Р╫Э ╫Ф╫д╫Х╫и╫Ю╫Ш ╫Ф╫й╫к╫а╫Ф (╫Ь╫Ю╫й╫Ь "9:5" тЖТ "09:05"), ╫Ь╫Х╫Т ╫Р╫Ц╫Ф╫и╫Ф
      if (kDebugMode && formatted != time) {
        debugPrint(
          'тЪая╕П OnboardingData: ╫д╫Х╫и╫Ю╫Ш ╫Ц╫Ю╫Я ╫к╫Х╫з╫Я ╫Ю-"$time" ╫Ь-"$formatted"',
        );
      }
      
      return formatted;
    } catch (e) {
      if (kDebugMode) {
        debugPrint(
          'тЪая╕П OnboardingData: ╫д╫Х╫и╫Ю╫Ш ╫Ц╫Ю╫Я ╫й╫Т╫Х╫Щ ($time), ╫Ю╫й╫к╫Ю╫й ╫С╫С╫и╫Щ╫и╫к ╫Ю╫Ч╫У╫Ь 09:00',
        );
      }
      return '09:00';
    }
  }

  // ========================================
  // TimeOfDay Helpers
  // ========================================

  /// ╫Ф╫Ю╫и╫к String ╫Ь╫д╫Х╫и╫Ю╫Ш TimeOfDay (╫Ь╫й╫Щ╫Ю╫Х╫й ╫С-UI)
  /// 
  /// ╫У╫Х╫Т╫Ю╫Ф:
  /// ```dart
  /// final time = OnboardingData.parseTime('09:30');
  /// // TimeOfDay(hour: 9, minute: 30)
  /// ```
  static TimeOfDay? parseTime(String timeStr) {
    try {
      final parts = timeStr.split(':');
      if (parts.length != 2) return null;
      
      final hour = int.parse(parts[0]);
      final minute = int.parse(parts[1]);
      
      if (hour < 0 || hour > 23 || minute < 0 || minute > 59) return null;
      
      return TimeOfDay(hour: hour, minute: minute);
    } catch (e) {
      return null;
    }
  }

  /// ╫Ф╫Ю╫и╫к TimeOfDay ╫Ь╫д╫Х╫и╫Ю╫Ш String (╫Ь╫й╫Ю╫Щ╫и╫Ф)
  /// 
  /// ╫У╫Х╫Т╫Ю╫Ф:
  /// ```dart
  /// final str = OnboardingData.formatTime(TimeOfDay(hour: 9, minute: 30));
  /// // "09:30"
  /// ```
  static String formatTime(TimeOfDay time) {
    return '${time.hour.toString().padLeft(2, '0')}:${time.minute.toString().padLeft(2, '0')}';
  }

  /// ╫з╫С╫Ь╫к TimeOfDay ╫Ю╫Ф╫а╫к╫Х╫а╫Щ╫Э
  TimeOfDay? get reminderTimeOfDay => parseTime(reminderTime);

  // ========================================
  // ╫д╫Х╫а╫з╫ж╫Щ╫Х╫к ╫в╫Ц╫и
  // ========================================

  /// ╫Щ╫ж╫Щ╫и╫к ╫в╫Х╫к╫з ╫Ю╫в╫Х╫У╫Ы╫Я ╫й╫Ь ╫Ф╫Ю╫Х╫У╫Ь
  OnboardingData copyWith({
    int? familySize,
    Set<String>? preferredStores,
    int? shoppingFrequency,
    Set<int>? shoppingDays,
    bool? hasChildren,
    Set<String>? childrenAges,
    bool? shareLists,
    String? reminderTime,
  }) {
    return OnboardingData(
      familySize: familySize ?? this.familySize,
      preferredStores: preferredStores ?? this.preferredStores,
      shoppingFrequency: shoppingFrequency ?? this.shoppingFrequency,
      shoppingDays: shoppingDays ?? this.shoppingDays,
      hasChildren: hasChildren ?? this.hasChildren,
      childrenAges: childrenAges ?? this.childrenAges,
      shareLists: shareLists ?? this.shareLists,
      reminderTime: reminderTime ?? this.reminderTime,
    );
  }

  /// ╫Ф╫Ю╫и╫Ф ╫Ь-Map (╫Ь╫ж╫Х╫и╫Ъ JSON)
  /// 
  /// ╫и╫й╫Щ╫Ю╫Х╫к ╫Ю╫Ю╫Х╫Щ╫а╫Х╫к ╫Ь╫У╫Ш╫и╫Ю╫Щ╫а╫Щ╫Ц╫Э
  Map<String, dynamic> toJson() {
    return {
      'familySize': familySize,
      'preferredStores': preferredStores.toList()..sort(),
      'shoppingFrequency': shoppingFrequency,
      'shoppingDays': shoppingDays.toList()..sort(),
      'hasChildren': hasChildren,
      'childrenAges': childrenAges.toList()..sort(),
      'shareLists': shareLists,
      'reminderTime': reminderTime,
    };
  }

  /// ╫Ф╫Ю╫и╫Ф ╫Ь╫Ю╫Ч╫и╫Х╫Ц╫к ╫з╫и╫Щ╫Р╫Ф (╫Ь╫У╫Щ╫С╫Х╫Т)
  @override
  String toString() {
    return 'OnboardingData('
        'familySize: $familySize, '
        'stores: ${preferredStores.length}, '
        'frequency: $shoppingFrequency, '
        'days: ${shoppingDays.length}, '
        'hasChildren: $hasChildren, '
        'childrenAges: ${childrenAges.length}, '
        'shareLists: $shareLists, '
        'reminderTime: $reminderTime'
        ')';
  }

  // ========================================
  // ╫й╫Ю╫Щ╫и╫Ф ╫Х╫Ш╫в╫Щ╫а╫Ф
  // ========================================

  /// ╫й╫Ю╫Щ╫и╫к ╫Ы╫Ь ╫Ф╫Ф╫в╫У╫д╫Х╫к ╫Ь-SharedPreferences
  ///
  /// ╫Ю╫Ч╫Ц╫Щ╫и true ╫Р╫Э ╫Ф╫й╫Ю╫Щ╫и╫Ф ╫Ф╫ж╫Ь╫Щ╫Ч╫Ф, false ╫Р╫Ч╫и╫к.
  /// ╫Ы╫Х╫Ь╫Ь logging ╫Ю╫д╫Х╫и╫Ш ╫Ь╫У╫Щ╫С╫Х╫Т (kDebugMode).
  /// 
  /// тЪая╕П ╫Ь╫Р ╫Р╫Ш╫Х╫Ю╫Щ: ╫Р╫Э ╫й╫У╫Ф ╫Р╫Ч╫У ╫а╫Ы╫й╫Ь, ╫Ч╫Ь╫з ╫Ю╫Ф╫й╫У╫Х╫к ╫Ы╫С╫и ╫а╫й╫Ю╫и╫Х.
  Future<bool> save() async {
    try {
      if (kDebugMode) {
        debugPrint('ЁЯТ╛ OnboardingData: ╫Ю╫к╫Ч╫Щ╫Ь ╫й╫Ю╫Щ╫и╫Ф...');
      }
      
      final prefs = await SharedPreferences.getInstance();

      // ╫Х╫Х╫Ь╫Щ╫У╫ж╫Щ╫Ф ╫а╫Х╫б╫д╫к ╫Ь╫д╫а╫Щ ╫й╫Ю╫Щ╫и╫Ф (╫Ь╫Ю╫а╫Щ╫в╫к ╫й╫Ю╫Щ╫и╫Ф ╫Щ╫У╫а╫Щ╫к ╫й╫Т╫Х╫Щ╫Ф)
      final validatedTime = _validateTime(reminderTime);
      final validatedStores = _filterValidStores(preferredStores);
      final validatedDays = _filterValidDays(shoppingDays);
      final validatedAges = _filterValidAges(childrenAges);

      // ╫й╫Ю╫Щ╫и╫к schema version
      await prefs.setInt(OnboardingPrefsKeys.schemaVersion, kCurrentSchemaVersion);

      // ╫и╫й╫Щ╫Ю╫к ╫й╫У╫Х╫к ╫й╫а╫Ы╫й╫Ь╫Х (╫Ь╫й╫Щ╫д╫Х╫и logging)
      final failedFields = <String>[];

      // ╫й╫Ю╫Щ╫и╫к ╫Ы╫Ь ╫Ф╫й╫У╫Х╫к ╫С╫Ц╫Ф ╫Р╫Ч╫и ╫Ц╫Ф ╫в╫Э logging
      if (!await _saveField(
        prefs,
        OnboardingPrefsKeys.familySize,
        () => prefs.setInt(OnboardingPrefsKeys.familySize, familySize),
      )) {failedFields.add('familySize');}

      if (!await _saveField(
        prefs,
        OnboardingPrefsKeys.preferredStores,
        () => prefs.setStringList(
          OnboardingPrefsKeys.preferredStores,
          validatedStores.toList()..sort(), // ╫Ю╫Ю╫Х╫Щ╫Я ╫Ь╫У╫Ш╫и╫Ю╫Щ╫а╫Щ╫Ц╫Э
        ),
      )) {failedFields.add('preferredStores');}

      if (!await _saveField(
        prefs,
        OnboardingPrefsKeys.shoppingFrequency,
        () => prefs.setInt(
          OnboardingPrefsKeys.shoppingFrequency,
          shoppingFrequency,
        ),
      )) {failedFields.add('shoppingFrequency');}

      if (!await _saveField(
        prefs,
        OnboardingPrefsKeys.shoppingDays,
        () => prefs.setString(
          OnboardingPrefsKeys.shoppingDays,
          validatedDays.toList().join(','), // ╫й╫Ю╫Щ╫и╫Ф ╫Ы-CSV
        ),
      )) {failedFields.add('shoppingDays');}

      if (!await _saveField(
        prefs,
        OnboardingPrefsKeys.hasChildren,
        () => prefs.setBool(OnboardingPrefsKeys.hasChildren, hasChildren),
      )) {failedFields.add('hasChildren');}

      if (!await _saveField(
        prefs,
        OnboardingPrefsKeys.childrenAges,
        () => prefs.setStringList(
          OnboardingPrefsKeys.childrenAges,
          validatedAges.toList()..sort(),
        ),
      )) {failedFields.add('childrenAges');}

      if (!await _saveField(
        prefs,
        OnboardingPrefsKeys.shareLists,
        () => prefs.setBool(OnboardingPrefsKeys.shareLists, shareLists),
      )) {failedFields.add('shareLists');}

      if (!await _saveField(
        prefs,
        OnboardingPrefsKeys.reminderTime,
        () => prefs.setString(OnboardingPrefsKeys.reminderTime, validatedTime),
      )) {failedFields.add('reminderTime');}

      final success = failedFields.isEmpty;

      if (kDebugMode) {
        if (success) {
          debugPrint('тЬЕ OnboardingData: ╫Ы╫Ь ╫Ф╫й╫У╫Х╫к ╫а╫й╫Ю╫и╫Х ╫С╫Ф╫ж╫Ь╫Ч╫Ф');
          debugPrint('   ЁЯУК ╫а╫к╫Х╫а╫Щ╫Э: $this');
        } else {
          debugPrint(
            'тЭМ OnboardingData: ╫й╫Т╫Щ╫Р╫Ф ╫С╫й╫Ю╫Щ╫и╫к ╫Ф╫й╫У╫Х╫к ╫Ф╫С╫Р╫Щ╫Э: ${failedFields.join(', ')}',
          );
        }
      }

      return success;
    } catch (e) {
      if (kDebugMode) {
        debugPrint('тЭМ OnboardingData: ╫й╫Т╫Щ╫Р╫Ф ╫Ы╫Ь╫Ь╫Щ╫к ╫С╫й╫Ю╫Щ╫и╫Ф - $e');
      }
      return false;
    }
  }

  /// ╫д╫Х╫а╫з╫ж╫Щ╫Ф ╫д╫а╫Щ╫Ю╫Щ╫к ╫Ь╫й╫Ю╫Щ╫и╫к ╫й╫У╫Ф ╫С╫Х╫У╫У ╫в╫Э logging
  Future<bool> _saveField(
    SharedPreferences prefs,
    String key,
    Future<bool> Function() saveFn,
  ) async {
    try {
      final result = await saveFn();
      if (kDebugMode) {
        if (result) {
          debugPrint('   тЬУ ╫а╫й╫Ю╫и: $key');
        } else {
          debugPrint('   тЬЧ ╫а╫Ы╫й╫Ь: $key');
        }
      }
      return result;
    } catch (e) {
      if (kDebugMode) {
        debugPrint('   тЬЧ ╫й╫Т╫Щ╫Р╫Ф ╫С-$key: $e');
      }
      return false;
    }
  }

  /// ╫Ш╫в╫Щ╫а╫к ╫Ф╫в╫У╫д╫Х╫к ╫Ю-SharedPreferences
  ///
  /// ╫Ю╫Ч╫Ц╫Щ╫и OnboardingData ╫в╫Э ╫Ф╫в╫и╫Ы╫Щ╫Э ╫Ф╫й╫Ю╫Х╫и╫Щ╫Э,
  /// ╫Р╫Х ╫в╫и╫Ы╫Щ ╫С╫и╫Щ╫и╫к ╫Ю╫Ч╫У╫Ь ╫Р╫Э ╫Р╫Щ╫Я ╫а╫к╫Х╫а╫Щ╫Э ╫й╫Ю╫Х╫и╫Щ╫Э.
  /// 
  /// ╫Ы╫Х╫Ь╫Ь ╫б╫Щ╫а╫Х╫Я ╫в╫и╫Ы╫Щ╫Э ╫Ь╫Р ╫к╫з╫Щ╫а╫Щ╫Э ╫Хlogging ╫Ю╫д╫Х╫и╫Ш ╫в╫Ь ╫й╫Щ╫Ю╫Х╫й ╫С╫С╫и╫Щ╫и╫Х╫к ╫Ю╫Ч╫У╫Ь.
  static Future<OnboardingData> load() async {
    try {
      if (kDebugMode) {
        debugPrint('ЁЯУВ OnboardingData: ╫Ш╫Х╫в╫Я ╫а╫к╫Х╫а╫Щ╫Э...');
      }
      
      final prefs = await SharedPreferences.getInstance();

      // ╫С╫У╫Щ╫з╫к schema version ╫Ь╫Ю╫Щ╫Т╫и╫ж╫Щ╫Х╫к ╫в╫к╫Щ╫У╫Щ╫Х╫к
      final schemaVersion = prefs.getInt(OnboardingPrefsKeys.schemaVersion) ?? 1;
      if (kDebugMode && schemaVersion != kCurrentSchemaVersion) {
        debugPrint(
          'ЁЯФД OnboardingData: Schema version $schemaVersion (╫а╫Х╫Ы╫Ч╫Щ: $kCurrentSchemaVersion)',
        );
      }

      // ╫Ш╫в╫Щ╫а╫к ╫а╫к╫Х╫а╫Щ╫Э ╫в╫Э ╫Р╫Ц╫Ф╫и╫Х╫к ╫б╫д╫ж╫Щ╫д╫Щ╫Х╫к
      final familySizeValue = prefs.getInt(OnboardingPrefsKeys.familySize);
      if (kDebugMode && familySizeValue == null) {
        debugPrint('   тЪая╕П familySize ╫Ь╫Р ╫а╫Ю╫ж╫Р, ╫Ю╫й╫к╫Ю╫й ╫С╫С╫и╫Щ╫и╫к ╫Ю╫Ч╫У╫Ь: 2');
      }

      final storesValue = prefs.getStringList(OnboardingPrefsKeys.preferredStores);
      if (kDebugMode && (storesValue == null || storesValue.isEmpty)) {
        debugPrint('   тЪая╕П preferredStores ╫и╫Щ╫з, ╫Ю╫й╫к╫Ю╫й ╫С╫С╫и╫Щ╫и╫к ╫Ю╫Ч╫У╫Ь: []');
      }

      final frequencyValue = prefs.getInt(OnboardingPrefsKeys.shoppingFrequency);
      if (kDebugMode && frequencyValue == null) {
        debugPrint('   тЪая╕П shoppingFrequency ╫Ь╫Р ╫а╫Ю╫ж╫Р, ╫Ю╫й╫к╫Ю╫й ╫С╫С╫и╫Щ╫и╫к ╫Ю╫Ч╫У╫Ь: 2');
      }

      final daysValue = prefs.getString(OnboardingPrefsKeys.shoppingDays);
      final daysSet = daysValue != null && daysValue.isNotEmpty
          ? daysValue.split(',').map((s) => int.tryParse(s)).whereType<int>().toSet()
          : <int>{};
      if (kDebugMode && (daysValue == null || daysValue.isEmpty)) {
        debugPrint('   тЪая╕П shoppingDays ╫и╫Щ╫з, ╫Ю╫й╫к╫Ю╫й ╫С╫С╫и╫Щ╫и╫к ╫Ю╫Ч╫У╫Ь: []');
      }

      final hasChildrenValue = prefs.getBool(OnboardingPrefsKeys.hasChildren);
      if (kDebugMode && hasChildrenValue == null) {
        debugPrint('   тЪая╕П hasChildren ╫Ь╫Р ╫а╫Ю╫ж╫Р, ╫Ю╫й╫к╫Ю╫й ╫С╫С╫и╫Щ╫и╫к ╫Ю╫Ч╫У╫Ь: false');
      }

      final agesValue = prefs.getStringList(OnboardingPrefsKeys.childrenAges);
      if (kDebugMode && (agesValue == null || agesValue.isEmpty)) {
        debugPrint('   тЪая╕П childrenAges ╫и╫Щ╫з, ╫Ю╫й╫к╫Ю╫й ╫С╫С╫и╫Щ╫и╫к ╫Ю╫Ч╫У╫Ь: []');
      }

      final reminderValue = prefs.getString(OnboardingPrefsKeys.reminderTime);
      if (kDebugMode && reminderValue == null) {
        debugPrint('   тЪая╕П reminderTime ╫Ь╫Р ╫а╫Ю╫ж╫Р, ╫Ю╫й╫к╫Ю╫й ╫С╫С╫и╫Щ╫и╫к ╫Ю╫Ч╫У╫Ь: 09:00');
      }

      final data = OnboardingData(
        familySize: familySizeValue,
        preferredStores: (storesValue ?? []).toSet(),
        shoppingFrequency: frequencyValue,
        shoppingDays: daysSet,
        hasChildren: hasChildrenValue ?? false,
        childrenAges: (agesValue ?? []).toSet(),
        shareLists: prefs.getBool(OnboardingPrefsKeys.shareLists) ?? false,
        reminderTime: reminderValue,
      );

      if (kDebugMode) {
        debugPrint('тЬЕ OnboardingData: ╫а╫к╫Х╫а╫Щ╫Э ╫а╫Ш╫в╫а╫Х ╫С╫Ф╫ж╫Ь╫Ч╫Ф');
        debugPrint('   ЁЯУК ╫а╫к╫Х╫а╫Щ╫Э: $data');
      }
      
      return data;
    } catch (e) {
      if (kDebugMode) {
        debugPrint(
          'тЪая╕П OnboardingData: ╫й╫Т╫Щ╫Р╫Ф ╫С╫Ш╫в╫Щ╫а╫Ф, ╫Ю╫й╫к╫Ю╫й ╫С╫С╫и╫Щ╫и╫Х╫к ╫Ю╫Ч╫У╫Ь - $e',
        );
      }
      return OnboardingData();
    }
  }

  /// ╫Р╫Щ╫д╫Х╫б ╫Ь╫в╫и╫Ы╫Щ ╫С╫и╫Щ╫и╫к ╫Ю╫Ч╫У╫Ь
  static OnboardingData defaults() {
    if (kDebugMode) {
      debugPrint('ЁЯФД OnboardingData: ╫Щ╫Х╫ж╫и ╫С╫и╫Щ╫и╫Х╫к ╫Ю╫Ч╫У╫Ь');
    }
    return OnboardingData();
  }

  // ========================================
  // ╫а╫Щ╫Ф╫Х╫Ь ╫б╫Ш╫Ш╫Х╫б Onboarding
  // ========================================

  /// ╫б╫Щ╫Ю╫Х╫Я ╫й╫Ф╫Ю╫й╫к╫Ю╫й ╫б╫Щ╫Щ╫Э ╫Р╫к ╫к╫Ф╫Ь╫Щ╫Ъ ╫Ф-Onboarding
  ///
  /// ╫з╫Х╫и╫Р ╫Ь╫Ц╫Ф ╫С╫б╫Х╫г ╫к╫Ф╫Ь╫Щ╫Ъ ╫Ф-onboarding ╫Ы╫У╫Щ ╫й╫Ф╫Ю╫й╫к╫Ю╫й
  /// ╫Ь╫Р ╫Щ╫и╫Р╫Ф ╫Р╫Х╫к╫Х ╫й╫Х╫С ╫С╫д╫в╫Э ╫Ф╫С╫Р╫Ф.
  static Future<bool> markAsCompleted() async {
    try {
      if (kDebugMode) {
        debugPrint('тЬУ OnboardingData: ╫Ю╫б╫Ю╫Я onboarding ╫Ы╫Ф╫Х╫й╫Ь╫Э');
      }
      
      final prefs = await SharedPreferences.getInstance();
      final result = await prefs.setBool(
        OnboardingPrefsKeys.seenOnboarding,
        true,
      );

      if (kDebugMode) {
        if (result) {
          debugPrint('тЬЕ OnboardingData: ╫б╫Щ╫Ю╫Х╫Я ╫Ф╫Х╫й╫Ь╫Э ╫С╫Ф╫ж╫Ь╫Ч╫Ф');
        } else {
          debugPrint('тЭМ OnboardingData: ╫а╫Ы╫й╫Ь ╫С╫б╫Щ╫Ю╫Х╫Я');
        }
      }

      return result;
    } catch (e) {
      if (kDebugMode) {
        debugPrint('тЭМ OnboardingData: ╫й╫Т╫Щ╫Р╫Ф ╫С╫б╫Щ╫Ю╫Х╫Я - $e');
      }
      return false;
    }
  }

  /// ╫С╫У╫Щ╫з╫Ф ╫Ф╫Р╫Э ╫Ф╫Ю╫й╫к╫Ю╫й ╫Ы╫С╫и ╫в╫С╫и ╫Р╫к ╫Ф-Onboarding
  ///
  /// ╫Ю╫Ч╫Ц╫Щ╫и true ╫Р╫Э ╫Ф╫Ю╫й╫к╫Ю╫й ╫Ы╫С╫и ╫в╫С╫и ╫Р╫к ╫Ф╫к╫Ф╫Ь╫Щ╫Ъ.
  static Future<bool> hasSeenOnboarding() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final hasSeen =
          prefs.getBool(OnboardingPrefsKeys.seenOnboarding) ?? false;

      if (kDebugMode) {
        debugPrint(
          'ЁЯФН OnboardingData: ╫С╫У╫Щ╫з╫к ╫б╫Ш╫Ш╫Х╫б - ${hasSeen ? "╫в╫С╫и" : "╫Ь╫Р ╫в╫С╫и"}',
        );
      }
      
      return hasSeen;
    } catch (e) {
      if (kDebugMode) {
        debugPrint('тЪая╕П OnboardingData: ╫й╫Т╫Щ╫Р╫Ф ╫С╫С╫У╫Щ╫з╫к ╫б╫Ш╫Ш╫Х╫б - $e');
      }
      return false; // ╫С╫и╫Щ╫и╫к ╫Ю╫Ч╫У╫Ь - ╫а╫и╫Р╫Ф ╫Р╫к ╫Ф-onboarding
    }
  }

  /// ╫Р╫Щ╫д╫Х╫б ╫Ю╫Ь╫Р - ╫Ю╫Ч╫Щ╫з╫к ╫Ы╫Ь ╫Ф╫а╫к╫Х╫а╫Щ╫Э
  ///
  /// ╫й╫Щ╫Ю╫Х╫й╫Щ ╫Ь╫д╫Щ╫к╫Х╫Ч ╫Р╫Х ╫Ы╫й╫Ю╫й╫к╫Ю╫й ╫и╫Х╫ж╫Ф ╫Ь╫Ф╫к╫Ч╫Щ╫Ь ╫Ю╫Ч╫У╫й.
  /// ╫Ю╫Ч╫Ц╫Щ╫и true ╫Р╫Э ╫Ф╫Р╫Щ╫д╫Х╫б ╫Ф╫ж╫Ь╫Щ╫Ч.
  static Future<bool> reset() async {
    try {
      if (kDebugMode) {
        debugPrint('ЁЯЧСя╕П OnboardingData: ╫Ю╫к╫Ч╫Щ╫Ь ╫Р╫Щ╫д╫Х╫б ╫Ю╫Ь╫Р...');
      }
      
      final prefs = await SharedPreferences.getInstance();

      final keys = [
        OnboardingPrefsKeys.schemaVersion,
        OnboardingPrefsKeys.seenOnboarding,
        OnboardingPrefsKeys.familySize,
        OnboardingPrefsKeys.preferredStores,
        OnboardingPrefsKeys.shoppingFrequency,
        OnboardingPrefsKeys.shoppingDays,
        OnboardingPrefsKeys.hasChildren,
        OnboardingPrefsKeys.childrenAges,
        OnboardingPrefsKeys.shareLists,
        OnboardingPrefsKeys.reminderTime,
      ];

      for (final key in keys) {
        await prefs.remove(key);
        if (kDebugMode) {
          debugPrint('   ЁЯЧСя╕П ╫Ю╫Ч╫з: $key');
        }
      }

      if (kDebugMode) {
        debugPrint('тЬЕ OnboardingData: ╫Р╫Щ╫д╫Х╫б ╫Ф╫Х╫й╫Ь╫Э ╫С╫Ф╫ж╫Ь╫Ч╫Ф');
      }
      
      return true;
    } catch (e) {
      if (kDebugMode) {
        debugPrint('тЭМ OnboardingData: ╫й╫Т╫Щ╫Р╫Ф ╫С╫Р╫Щ╫д╫Х╫б - $e');
      }
      return false;
    }
  }
}
