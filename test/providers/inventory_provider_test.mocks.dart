// Mocks generated by Mockito 5.4.6 from annotations
// in memozap/test/providers/inventory_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i8;

import 'package:flutter/material.dart' as _i6;
import 'package:memozap/models/inventory_item.dart' as _i2;
import 'package:memozap/models/user_entity.dart' as _i7;
import 'package:memozap/providers/user_context.dart' as _i5;
import 'package:memozap/repositories/inventory_repository.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeInventoryItem_0 extends _i1.SmartFake implements _i2.InventoryItem {
  _FakeInventoryItem_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [InventoryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockInventoryRepository extends _i1.Mock
    implements _i3.InventoryRepository {
  @override
  _i4.Future<List<_i2.InventoryItem>> fetchItems(String? householdId) =>
      (super.noSuchMethod(
            Invocation.method(#fetchItems, [householdId]),
            returnValue: _i4.Future<List<_i2.InventoryItem>>.value(
              <_i2.InventoryItem>[],
            ),
            returnValueForMissingStub:
                _i4.Future<List<_i2.InventoryItem>>.value(
                  <_i2.InventoryItem>[],
                ),
          )
          as _i4.Future<List<_i2.InventoryItem>>);

  @override
  _i4.Future<_i2.InventoryItem> saveItem(
    _i2.InventoryItem? item,
    String? householdId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#saveItem, [item, householdId]),
            returnValue: _i4.Future<_i2.InventoryItem>.value(
              _FakeInventoryItem_0(
                this,
                Invocation.method(#saveItem, [item, householdId]),
              ),
            ),
            returnValueForMissingStub: _i4.Future<_i2.InventoryItem>.value(
              _FakeInventoryItem_0(
                this,
                Invocation.method(#saveItem, [item, householdId]),
              ),
            ),
          )
          as _i4.Future<_i2.InventoryItem>);

  @override
  _i4.Future<void> deleteItem(String? id, String? householdId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteItem, [id, householdId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [UserContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserContext extends _i1.Mock implements _i5.UserContext {
  @override
  bool get isLoggedIn =>
      (super.noSuchMethod(
            Invocation.getter(#isLoggedIn),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isLoading =>
      (super.noSuchMethod(
            Invocation.getter(#isLoading),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasError =>
      (super.noSuchMethod(
            Invocation.getter(#hasError),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i6.ThemeMode get themeMode =>
      (super.noSuchMethod(
            Invocation.getter(#themeMode),
            returnValue: _i6.ThemeMode.system,
            returnValueForMissingStub: _i6.ThemeMode.system,
          )
          as _i6.ThemeMode);

  @override
  bool get compactView =>
      (super.noSuchMethod(
            Invocation.getter(#compactView),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get showPrices =>
      (super.noSuchMethod(
            Invocation.getter(#showPrices),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(
            Invocation.getter(#hasListeners),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i4.Future<void> signUp({
    required String? email,
    required String? password,
    required String? name,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#signUp, [], {
              #email: email,
              #password: password,
              #name: name,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> signIn({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#signIn, [], {
              #email: email,
              #password: password,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> signOut() =>
      (super.noSuchMethod(
            Invocation.method(#signOut, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> signOutAndClearAllData() =>
      (super.noSuchMethod(
            Invocation.method(#signOutAndClearAllData, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> logout() =>
      (super.noSuchMethod(
            Invocation.method(#logout, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> saveUser(_i7.UserEntity? user) =>
      (super.noSuchMethod(
            Invocation.method(#saveUser, [user]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateUserProfile({String? name, String? avatar}) =>
      (super.noSuchMethod(
            Invocation.method(#updateUserProfile, [], {
              #name: name,
              #avatar: avatar,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> sendPasswordResetEmail(String? email) =>
      (super.noSuchMethod(
            Invocation.method(#sendPasswordResetEmail, [email]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void setThemeMode(_i6.ThemeMode? mode) => super.noSuchMethod(
    Invocation.method(#setThemeMode, [mode]),
    returnValueForMissingStub: null,
  );

  @override
  void toggleCompactView() => super.noSuchMethod(
    Invocation.method(#toggleCompactView, []),
    returnValueForMissingStub: null,
  );

  @override
  void toggleShowPrices() => super.noSuchMethod(
    Invocation.method(#toggleShowPrices, []),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<void> retry() =>
      (super.noSuchMethod(
            Invocation.method(#retry, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> clearAll() =>
      (super.noSuchMethod(
            Invocation.method(#clearAll, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
