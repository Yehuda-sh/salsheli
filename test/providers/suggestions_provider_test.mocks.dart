// Mocks generated by Mockito 5.4.6 from annotations
// in memozap/test/providers/suggestions_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i7;

import 'package:memozap/models/inventory_item.dart' as _i2;
import 'package:memozap/models/unified_list_item.dart' as _i6;
import 'package:memozap/providers/inventory_provider.dart' as _i3;
import 'package:memozap/providers/user_context.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeInventoryItem_0 extends _i1.SmartFake implements _i2.InventoryItem {
  _FakeInventoryItem_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [InventoryProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockInventoryProvider extends _i1.Mock implements _i3.InventoryProvider {
  MockInventoryProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  bool get hasError =>
      (super.noSuchMethod(Invocation.getter(#hasError), returnValue: false)
          as bool);

  @override
  bool get isEmpty =>
      (super.noSuchMethod(Invocation.getter(#isEmpty), returnValue: false)
          as bool);

  @override
  List<_i2.InventoryItem> get items =>
      (super.noSuchMethod(
            Invocation.getter(#items),
            returnValue: <_i2.InventoryItem>[],
          )
          as List<_i2.InventoryItem>);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  void updateUserContext(_i4.UserContext? newContext) => super.noSuchMethod(
    Invocation.method(#updateUserContext, [newContext]),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<void> loadItems() =>
      (super.noSuchMethod(
            Invocation.method(#loadItems, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i2.InventoryItem> createItem({
    required String? productName,
    required String? category,
    required String? location,
    int? quantity = 1,
    String? unit = 'יח\'',
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createItem, [], {
              #productName: productName,
              #category: category,
              #location: location,
              #quantity: quantity,
              #unit: unit,
            }),
            returnValue: _i5.Future<_i2.InventoryItem>.value(
              _FakeInventoryItem_0(
                this,
                Invocation.method(#createItem, [], {
                  #productName: productName,
                  #category: category,
                  #location: location,
                  #quantity: quantity,
                  #unit: unit,
                }),
              ),
            ),
          )
          as _i5.Future<_i2.InventoryItem>);

  @override
  _i5.Future<void> updateItem(_i2.InventoryItem? item) =>
      (super.noSuchMethod(
            Invocation.method(#updateItem, [item]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> deleteItem(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteItem, [id]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> retry() =>
      (super.noSuchMethod(
            Invocation.method(#retry, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void clearAll() => super.noSuchMethod(
    Invocation.method(#clearAll, []),
    returnValueForMissingStub: null,
  );

  @override
  List<_i2.InventoryItem> itemsByCategory(String? category) =>
      (super.noSuchMethod(
            Invocation.method(#itemsByCategory, [category]),
            returnValue: <_i2.InventoryItem>[],
          )
          as List<_i2.InventoryItem>);

  @override
  List<_i2.InventoryItem> getLowStockItems({int? threshold = 2}) =>
      (super.noSuchMethod(
            Invocation.method(#getLowStockItems, [], {#threshold: threshold}),
            returnValue: <_i2.InventoryItem>[],
          )
          as List<_i2.InventoryItem>);

  @override
  _i5.Future<void> addStock(String? productName, int? quantity) =>
      (super.noSuchMethod(
            Invocation.method(#addStock, [productName, quantity]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<int> updateStockAfterPurchase(
    List<_i6.UnifiedListItem>? purchasedItems,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateStockAfterPurchase, [purchasedItems]),
            returnValue: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);

  @override
  List<_i2.InventoryItem> itemsByLocation(String? location) =>
      (super.noSuchMethod(
            Invocation.method(#itemsByLocation, [location]),
            returnValue: <_i2.InventoryItem>[],
          )
          as List<_i2.InventoryItem>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
