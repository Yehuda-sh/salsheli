// Mocks generated by Mockito 5.4.6 from annotations
// in memozap/test/providers/shopping_lists_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i11;

import 'package:flutter/material.dart' as _i9;
import 'package:memozap/models/receipt.dart' as _i3;
import 'package:memozap/models/shopping_list.dart' as _i2;
import 'package:memozap/models/user_entity.dart' as _i10;
import 'package:memozap/providers/user_context.dart' as _i8;
import 'package:memozap/repositories/receipt_repository.dart' as _i7;
import 'package:memozap/repositories/shopping_lists_repository.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeShoppingList_0 extends _i1.SmartFake implements _i2.ShoppingList {
  _FakeShoppingList_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeReceipt_1 extends _i1.SmartFake implements _i3.Receipt {
  _FakeReceipt_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ShoppingListsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockShoppingListsRepository extends _i1.Mock
    implements _i4.ShoppingListsRepository {
  MockShoppingListsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i2.ShoppingList>> fetchLists(String? householdId) =>
      (super.noSuchMethod(
            Invocation.method(#fetchLists, [householdId]),
            returnValue: _i5.Future<List<_i2.ShoppingList>>.value(
              <_i2.ShoppingList>[],
            ),
          )
          as _i5.Future<List<_i2.ShoppingList>>);

  @override
  _i5.Future<_i2.ShoppingList> saveList(
    _i2.ShoppingList? list,
    String? householdId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#saveList, [list, householdId]),
            returnValue: _i5.Future<_i2.ShoppingList>.value(
              _FakeShoppingList_0(
                this,
                Invocation.method(#saveList, [list, householdId]),
              ),
            ),
          )
          as _i5.Future<_i2.ShoppingList>);

  @override
  _i5.Future<void> deleteList(String? id, String? householdId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteList, [id, householdId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> addSharedUser(
    String? listId,
    String? userId,
    String? role,
    String? userName,
    String? userEmail,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#addSharedUser, [
              listId,
              userId,
              role,
              userName,
              userEmail,
            ]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> removeSharedUser(String? listId, String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#removeSharedUser, [listId, userId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> updateUserRole(
    String? listId,
    String? userId,
    String? newRole,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateUserRole, [listId, userId, newRole]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> transferOwnership(
    String? listId,
    String? currentOwnerId,
    String? newOwnerId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#transferOwnership, [
              listId,
              currentOwnerId,
              newOwnerId,
            ]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<String> createRequest(
    String? listId,
    String? requesterId,
    String? type,
    Map<String, dynamic>? requestData,
    String? requesterName,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createRequest, [
              listId,
              requesterId,
              type,
              requestData,
              requesterName,
            ]),
            returnValue: _i5.Future<String>.value(
              _i6.dummyValue<String>(
                this,
                Invocation.method(#createRequest, [
                  listId,
                  requesterId,
                  type,
                  requestData,
                  requesterName,
                ]),
              ),
            ),
          )
          as _i5.Future<String>);

  @override
  _i5.Future<void> approveRequest(
    String? listId,
    String? requestId,
    String? reviewerId,
    String? reviewerName,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#approveRequest, [
              listId,
              requestId,
              reviewerId,
              reviewerName,
            ]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> rejectRequest(
    String? listId,
    String? requestId,
    String? reviewerId,
    String? reason,
    String? reviewerName,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#rejectRequest, [
              listId,
              requestId,
              reviewerId,
              reason,
              reviewerName,
            ]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<List<Map<String, dynamic>>> getPendingRequests(String? listId) =>
      (super.noSuchMethod(
            Invocation.method(#getPendingRequests, [listId]),
            returnValue: _i5.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i5.Future<List<Map<String, dynamic>>>);
}

/// A class which mocks [ReceiptRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockReceiptRepository extends _i1.Mock implements _i7.ReceiptRepository {
  MockReceiptRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i3.Receipt>> fetchReceipts(String? householdId) =>
      (super.noSuchMethod(
            Invocation.method(#fetchReceipts, [householdId]),
            returnValue: _i5.Future<List<_i3.Receipt>>.value(<_i3.Receipt>[]),
          )
          as _i5.Future<List<_i3.Receipt>>);

  @override
  _i5.Future<_i3.Receipt> saveReceipt({
    required _i3.Receipt? receipt,
    required String? householdId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#saveReceipt, [], {
              #receipt: receipt,
              #householdId: householdId,
            }),
            returnValue: _i5.Future<_i3.Receipt>.value(
              _FakeReceipt_1(
                this,
                Invocation.method(#saveReceipt, [], {
                  #receipt: receipt,
                  #householdId: householdId,
                }),
              ),
            ),
          )
          as _i5.Future<_i3.Receipt>);

  @override
  _i5.Future<void> deleteReceipt({
    required String? id,
    required String? householdId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#deleteReceipt, [], {
              #id: id,
              #householdId: householdId,
            }),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [UserContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserContext extends _i1.Mock implements _i8.UserContext {
  MockUserContext() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isLoggedIn =>
      (super.noSuchMethod(Invocation.getter(#isLoggedIn), returnValue: false)
          as bool);

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  bool get hasError =>
      (super.noSuchMethod(Invocation.getter(#hasError), returnValue: false)
          as bool);

  @override
  _i9.ThemeMode get themeMode =>
      (super.noSuchMethod(
            Invocation.getter(#themeMode),
            returnValue: _i9.ThemeMode.system,
          )
          as _i9.ThemeMode);

  @override
  bool get compactView =>
      (super.noSuchMethod(Invocation.getter(#compactView), returnValue: false)
          as bool);

  @override
  bool get showPrices =>
      (super.noSuchMethod(Invocation.getter(#showPrices), returnValue: false)
          as bool);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i5.Future<void> signUp({
    required String? email,
    required String? password,
    required String? name,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#signUp, [], {
              #email: email,
              #password: password,
              #name: name,
            }),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> signIn({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#signIn, [], {
              #email: email,
              #password: password,
            }),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> signOut() =>
      (super.noSuchMethod(
            Invocation.method(#signOut, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> signOutAndClearAllData() =>
      (super.noSuchMethod(
            Invocation.method(#signOutAndClearAllData, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> logout() =>
      (super.noSuchMethod(
            Invocation.method(#logout, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> saveUser(_i10.UserEntity? user) =>
      (super.noSuchMethod(
            Invocation.method(#saveUser, [user]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> updateUserProfile({String? name, String? avatar}) =>
      (super.noSuchMethod(
            Invocation.method(#updateUserProfile, [], {
              #name: name,
              #avatar: avatar,
            }),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> sendPasswordResetEmail(String? email) =>
      (super.noSuchMethod(
            Invocation.method(#sendPasswordResetEmail, [email]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void setThemeMode(_i9.ThemeMode? mode) => super.noSuchMethod(
    Invocation.method(#setThemeMode, [mode]),
    returnValueForMissingStub: null,
  );

  @override
  void toggleCompactView() => super.noSuchMethod(
    Invocation.method(#toggleCompactView, []),
    returnValueForMissingStub: null,
  );

  @override
  void toggleShowPrices() => super.noSuchMethod(
    Invocation.method(#toggleShowPrices, []),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<void> retry() =>
      (super.noSuchMethod(
            Invocation.method(#retry, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> clearAll() =>
      (super.noSuchMethod(
            Invocation.method(#clearAll, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i11.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i11.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
