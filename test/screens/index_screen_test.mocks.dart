// Mocks generated by Mockito 5.4.4 from annotations
// in salsheli/test/screens/index_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:firebase_auth/firebase_auth.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:salsheli/models/user_entity.dart' as _i2;
import 'package:salsheli/providers/user_context.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [UserContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserContext extends _i1.Mock implements _i3.UserContext {
  MockUserContext() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserEntity? get user => (super.noSuchMethod(Invocation.getter(#user))
      as _i2.UserEntity?);

  @override
  bool get isLoggedIn =>
      (super.noSuchMethod(Invocation.getter(#isLoggedIn), returnValue: false)
          as bool);

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  bool get hasError =>
      (super.noSuchMethod(Invocation.getter(#hasError), returnValue: false)
          as bool);

  @override
  String? get errorMessage =>
      (super.noSuchMethod(Invocation.getter(#errorMessage)) as String?);

  @override
  String? get userId =>
      (super.noSuchMethod(Invocation.getter(#userId)) as String?);

  @override
  String? get userEmail =>
      (super.noSuchMethod(Invocation.getter(#userEmail)) as String?);

  @override
  String? get userName =>
      (super.noSuchMethod(Invocation.getter(#userName)) as String?);

  @override
  String? get householdId =>
      (super.noSuchMethod(Invocation.getter(#householdId)) as String?);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i4.Future<void> signUp({
    required String? email,
    required String? password,
    required String? name,
    String? householdId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#signUp, [], {
          #email: email,
          #password: password,
          #name: name,
          #householdId: householdId,
        }),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> signIn({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#signIn, [], {
          #email: email,
          #password: password,
        }),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(#signOut, []),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteAccount() => (super.noSuchMethod(
        Invocation.method(#deleteAccount, []),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(#addListener, [listener]),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(#removeListener, [listener]),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(#dispose, []),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(#notifyListeners, []),
        returnValueForMissingStub: null,
      );
}
